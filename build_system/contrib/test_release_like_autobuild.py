import os
import sys
mydir = sys.path[0]
pybuildDir = os.path.normpath(os.path.abspath(os.path.join(mydir, os.pardir, "pybuild")))
sys.path.insert(0, pybuildDir)
from test_release import *
import utils

def myusage():
  print "usage: %s [--short] [-serial] [.--testlist=<testlist name>] [--test=<test name>] [--log=filename|stdout] [--n=<number of procs] installdir srcdir" % sys.argv[0]
  sys.exit(1)



if __name__ == "__main__":
  import getopt



  shellCheck = True
  short = False
  serial = False
  testlist = "standard"

  longOptionSpec = ["short", "serial", "testlist=", "test=", "exclude=", "log=",  "n="]
  try:
    (opts, args) = getopt.gnu_getopt(sys.argv[1:], "", longOptionSpec)
  except Exception, e:
    print "Error parsing command line: %s" % e
    myusage()

  if len(args) !=2:
    myusage()

  testlists = []
  extratests = []
  excludedtests = []
  outfile = "test.out"
  nprocs = 1
  for (option, val) in opts:
    if option == "--short":
      short = True
    if option == "--serial":
      serial = True
    elif option == "--disable-shell-check":
      shellCheck = False
    elif option == "--testlist":
      testlists.append(val)
    elif option == "--test":
      extratests.append(val)
    elif option == "--log":
      outfile = val
    elif option == "--exclude":
      excludedtests.append(val)
    elif option == "--n":
      nprocs = int(val)

  if len(testlists) == 0 and len(extratests) == 0:
    testlists = ["standard"]

  #
  # Set up logging
  #
  rootlogger = logging.getLogger('')
  rootlogger.setLevel(logging.NOTSET)

  # to the console, we only print messages generated by this module of level INFO
  # and higher
  if outfile != "stdout":
    console = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter("%(asctime)s %(levelname)-7s %(message)s", "%H:%M:%S")
    console.setFormatter(formatter)
    console.setLevel(logging.INFO)
    console.addFilter(logging.Filter("test"))
    rootlogger.addHandler(console)

    # to the file, we send all messages from any source
    filelog = logging.FileHandler(outfile, "w")
    formatter = logging.Formatter("%(asctime)s %(name)-8s %(levelname)-7s %(message)s", "%y-%m-%d %H:%M:%S")
    filelog.setFormatter(formatter)
    filelog.setLevel(logging.NOTSET)
    rootlogger.addHandler(filelog)
  else:
    console = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter("%(asctime)s %(levelname)-7s %(message)s", "%H:%M:%S")
    console.setFormatter(formatter)
    console.setLevel(logging.NOTSET)
    rootlogger.addHandler(console)

  log.info("Detailed test results are in file %s", outfile)

  installdir = args[0]
  installdir = os.path.abspath(os.path.normpath(os.path.expanduser(installdir)))

  srcdir = args[1]
  srcdir = os.path.abspath(os.path.normpath(os.path.expanduser(srcdir)))

  utils.setupCleanEnvironment(installdir, shellCheck=shellCheck)

  (passed, failed, disabled)  = runTestsInSeparateDirectory(installdir, srcdir, 
                                         short=short, serial=serial,
                                         testlist=testlists,
                                         extratests=extratests,
                                         excludedtests=excludedtests, 
                                         nprocs=nprocs)



  if len(testlists) == 1 and len(extratests) == 0 and len(excludedtests) == 0:
    name = "%s testlist" % testlists[0]
  else:
    name = "testlists: %s  tests: %s  excluded: %s" % (testlists, extratests, excludedtests)

  logTestResults((passed, failed, disabled), (True, True, True), name, log)
    
  if len(failed) > 0:
    sys.exit(1)
  else:
    sys.exit(0)
